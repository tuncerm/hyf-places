{"version":3,"sources":["places/pages/UpdatePlace.js"],"names":["UpdatePlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","placeId","useParams","history","useHistory","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","response","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","token","push","userId","Fragment","onClear","className","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"mQAuGeA,UAvFK,WAClB,IAAMC,EAAQC,qBAAWC,KADD,EAE4BC,cAA7CC,EAFiB,EAEjBA,UAAWC,EAFM,EAENA,MAAOC,EAFD,EAECA,YAAaC,EAFd,EAEcA,WAChCC,EAAUC,cAAYD,QACtBE,EAAUC,cAJQ,EAMuBC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAjBsB,mBAMjBE,EANiB,KAMNC,EANM,KAMQC,EANR,KAoBxBC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACMf,EAAY,GAAD,OAAIgB,uCAAJ,YADjB,OACXC,EADW,OAEjBJ,EACE,CACEN,MAAO,CACLC,MAAOS,EAASC,MAAMX,MACtBE,SAAS,GAEXC,YAAa,CACXF,MAAOS,EAASC,MAAMR,YACtBD,SAAS,KAGb,GAbe,2CAAH,qDAgBhBU,KACC,CAACnB,EAAaE,EAASW,IAE1B,IAAMO,EAAwB,uCAAG,WAAMC,GAAN,SAAAN,EAAA,6DAC/BM,EAAMC,iBADyB,kBAGvBtB,EAAY,GAAD,OAAIgB,uCAAJ,mBAA4Cd,GAAW,QAASqB,KAAKC,UAAU,CAC9FjB,MAAOI,EAAUc,OAAOlB,MAAMC,MAC9BE,YAAaC,EAAUc,OAAOf,YAAYF,QACzC,CAAC,eAAgB,mBAAoB,cAAiB,UAAYd,EAAKgC,QAN7C,OAO7BtB,EAAQuB,KAAR,WAAiBjC,EAAKkC,OAAtB,YAP6B,uGAAH,sDAa9B,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAY9B,MAAOA,EAAO+B,QAAS7B,IAClCH,GAAa,yBAAKiC,UAAU,UAAS,kBAAC,IAAD,QACpCjC,GAAa,0BAAMiC,UAAU,aAAaC,SAAUZ,GACpD,kBAAC,IAAD,CACEa,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS5B,EACT6B,aAAc9B,EAAUc,OAAOlB,MAAMC,MACrCkC,aAAc/B,EAAUc,OAAOlB,MAAME,UAEvC,kBAAC,IAAD,CACEwB,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS5B,EACT6B,aAAc9B,EAAUc,OAAOf,YAAYF,MAC3CkC,aAAc/B,EAAUc,OAAOf,YAAYD,UAE7C,kBAAC,IAAD,CAAQ0B,KAAK,SAASS,UAAWjC,EAAUF,SAA3C","file":"static/js/9.1df7cb8a.chunk.js","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\n\nconst UpdatePlace = () => {\n  const auth =  useContext(AuthContext);\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n  const placeId = useParams().placeId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  useEffect(()=>{\n    const fetchPlace = async () => {\n      const response = await sendRequest(`${process.env.REACT_APP_API_URL}/places`);\n      setFormData(\n        {\n          title: {\n            value: response.place.title,\n            isValid: true\n          },\n          description: {\n            value: response.place.description,\n            isValid: true\n          }\n        },\n        true\n      );\n    }\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try{\n      await sendRequest(`${process.env.REACT_APP_API_URL}/places/${placeId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }),{'Content-Type': 'application/json', 'Authorization': 'Bearer ' + auth.token});\n      history.push(`/${auth.userId}/places`);\n    } catch {}\n  };\n\n \n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && <div className=\"center\"><LoadingSpinner /></div>}\n      {!isLoading && <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n          initialValue={formState.inputs.title.value}\n          initialValid={formState.inputs.title.isValid}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (min. 5 characters).\"\n          onInput={inputHandler}\n          initialValue={formState.inputs.description.value}\n          initialValid={formState.inputs.description.isValid}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          UPDATE PLACE\n        </Button>\n      </form>}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}