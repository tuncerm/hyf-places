{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","id","ref","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","password","formState","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","inputs","response","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/6.bea1f332.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n    const [file, setFile] = useState(null);\n    const [previewUrl, setPreviewUrl] = useState(null);\n    const [isValid, setIsValid] = useState(false);\n\n    const filePickerRef = useRef();\n\n    useEffect(()=>{\n        if(!file){\n            return;\n        }\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    }, [file]);\n\n    const pickedHandler = (event) => {\n        let pickedFile;\n        let fileIsValid = isValid;\n        if(event.target.files && event.target.files.length ===1){\n            pickedFile = event.target.files[0];\n            fileIsValid = true;\n            setFile(pickedFile);\n        } else {\n            fileIsValid = false;\n        }\n        setIsValid(fileIsValid);\n        props.onInput(props.id, pickedFile, fileIsValid);\n    };\n\n    const pickImageHandler=()=>{\n        filePickerRef.current.click();\n    };\n\n    return(\n        <div className=\"form-control\">\n            <input \n                id={props.id} \n                ref={filePickerRef} \n                style={{display: 'none'}} \n                type=\"file\" \n                accept=\".jpg,.png,.jpeg\" \n                onChange={pickedHandler}\n            />\n            <div className={`image-upload ${props.center && 'center'}`}>\n                <div className=\"image-upload__preview\">\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n                    {!previewUrl && <p>Please pick an image.</p>}\n                </div>\n                <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    )\n};\n\nexport default ImageUpload;","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false\n      },\n      password: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: '',\n            isValid: false\n          },\n          image: {\n            value: null,\n            isValid: false\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault();\n    if(isLoginMode){\n      try{\n        const response = await sendRequest(\n          `${process.env.REACT_APP_API_URL}/users/login`, \n          'POST', \n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          {'Content-Type': 'application/json'}\n        );\n        auth.login(response.userId, response.token);\n      } catch {}\n    } else {\n      try{\n        const formData = new FormData();\n        formData.append('name', formState.inputs.name.value);\n        formData.append('email', formState.inputs.email.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n        const response = await sendRequest(\n          `${process.env.REACT_APP_API_URL}/users/signup`, \n          'POST', \n          formData\n        );\n        auth.login(response.userId, response.token);\n      } catch {}\n    }\n\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError}/>\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay/>}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && <ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\" />}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n"],"sourceRoot":""}