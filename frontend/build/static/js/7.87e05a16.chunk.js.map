{"version":3,"sources":["shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","description","address","image","formState","inputHandler","history","useHistory","placeSubmitHandler","a","preventDefault","formData","FormData","append","inputs","process","Authorization","token","push","Fragment","onClear","onSubmit","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/7.87e05a16.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n    const [file, setFile] = useState(null);\n    const [previewUrl, setPreviewUrl] = useState(null);\n    const [isValid, setIsValid] = useState(false);\n\n    const filePickerRef = useRef();\n\n    useEffect(()=>{\n        if(!file){\n            return;\n        }\n        const fileReader = new FileReader();\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n        fileReader.readAsDataURL(file);\n    }, [file]);\n\n    const pickedHandler = (event) => {\n        let pickedFile;\n        let fileIsValid = isValid;\n        if(event.target.files && event.target.files.length ===1){\n            pickedFile = event.target.files[0];\n            fileIsValid = true;\n            setFile(pickedFile);\n        } else {\n            fileIsValid = false;\n        }\n        setIsValid(fileIsValid);\n        props.onInput(props.id, pickedFile, fileIsValid);\n    };\n\n    const pickImageHandler=()=>{\n        filePickerRef.current.click();\n    };\n\n    return(\n        <div className=\"form-control\">\n            <input \n                id={props.id} \n                ref={filePickerRef} \n                style={{display: 'none'}} \n                type=\"file\" \n                accept=\".jpg,.png,.jpeg\" \n                onChange={pickedHandler}\n            />\n            <div className={`image-upload ${props.center && 'center'}`}>\n                <div className=\"image-upload__preview\">\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n                    {!previewUrl && <p>Please pick an image.</p>}\n                </div>\n                <Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    )\n};\n\nexport default ImageUpload;","import React, {useContext} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport {useHttpClient} from '../../shared/hooks/http-hook';\nimport {AuthContext} from '../../shared/context/auth-context';\nimport './PlaceForm.css';\n\nconst NewPlace = () => {\n  const auth =  useContext(AuthContext);\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      },\n      address: {\n        value: '',\n        isValid: false\n      },\n      image: {\n        value: null,\n        isValid: false\n      }\n    },\n    false\n  );\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async event => {\n    event.preventDefault();\n    try{\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      formData.append('image', formState.inputs.image.value);\n      await sendRequest(`${process.env.REACT_APP_API_URL}/places`, 'POST', formData, {Authorization: 'Bearer ' + auth.token});\n      history.push('/');\n    } catch {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (at least 5 characters).\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\" />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace;\n"],"sourceRoot":""}